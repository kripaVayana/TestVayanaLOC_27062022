{
  "unpublishedCollection": {
    "name": "CNXQueryJSObject",
    "pageId": "Page for Query",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tmyVar1: [],\n\tmyVar2: {},\n\tdocShortForms: {\n    'POI': 'Proof of Identification',\n    'POA': 'Proof of Address',\n    'PAN': 'PAN',\n    'CC': 'Cancelled Cheque',\n    'IEC': 'Import Export Certificate',\n    'PD': 'PartnerShip Deed',\n    'PL': 'Partnership Letter',\n    \n    'COI': 'Certificate of Incorporation',\n    'MAA':'Memorandum & Article of Association',\n    'LDIR': 'List of Directors with DIN',\n    'BR': 'Board Resolution',\n    'BOD': 'Beneficial ownership declaration',\n    \n    'PD1': 'Entity Proof Document 1',\n    'PD2':'Entity Proof Document 2',\n    'PHT': 'Photo',\n    \n    'LPDPIN': 'List of Partners with DPIN',\n    'LLPBR': 'LLP Board Resolution'\n\t},\n\t\n\tgetFolderPrefix: () =>\n    appsmith.store.customerJID === \"IN\" ? \"IndIndiaKYC\" : \"IndFgnKYC\",\n\t\n  getEntityKYCDocListPath: () =>\n    `${appsmith.store.FilePath}/${appsmith.store.customerOID}_Entity`,\n\t\n  getIndKYCDocListPath: () =>\n    `${appsmith.store.FilePath}/${\n      appsmith.store.customerOID\n    }_${this.getFolderPrefix()}_`,\n\t\n\tgetEntityKYCDocData: async () => {\n\t\tconst entityKYC = await ListEntityKYCDocQuery.run();\n    return entityKYC.map((entry) => {\n      const dirs = entry.fileName.split(\"/\");\n      const fileDetails = dirs[2].split(\"__\");\n      return {\n        DocumentType: this.docShortForms[fileDetails[0]],\n        DocumentName: fileDetails.length === 3 ? fileDetails[1] : \"-\",\n        FileName: fileDetails[fileDetails.length - 1],\n        path: entry.fileName,\n        docTypeCode: fileDetails[0],\n        docName: fileDetails.length === 3 ? fileDetails[1] : null,\n        url: entry.url,\n      };\n    });\n  },\n\t\n  getIndKYCDocData: async (keyPId, keyPType) => {\n\t\tconst indKYCData = await ListIndKYCDocQuery.run();\n    const mappedData = indKYCData.map((entry) => {\n      const dirs = entry.fileName.split(\"/\");\n      const fileDetails = dirs[2].split(\"__\");\n      // kycfiles/0df5b01a_IndIndiaKYC_3b0ah603/PHT__Logo.png\n      return {\n        DocumentType: this.docShortForms[fileDetails[0]],\n        DocumentName: fileDetails.length === 3 ? fileDetails[1] : \"-\",\n        FileName: fileDetails[fileDetails.length - 1],\n        path: entry.fileName,\n        docTypeCode: fileDetails[0],\n        docName: fileDetails.length === 3 ? fileDetails[1] : null,\n        url: entry.url,\n        keyPId: dirs[1].split(\"_\")[2],\n        keyPType: keyPType,\n      };\n    });\n    return mappedData.filter((item) => item.keyPId === keyPId);\n  },\n\t\n\t// Entity Details\n\tinsertEntityDataToCNX: async () => {\n    const apsData = await SelectApsCustomerData.run();\n    if (apsData && apsData.length > 0) {\n      try {\n        await InsertOTIntegrationEntity.run({data: apsData[0]});\n      } catch (e) {\n        return false;\n      }\n    }\n    return true;\n  },\n\t\n\t// Key Person\n  insertKeyPersonDataToCNX: async () => {\n    const keyPersonData = await SelectKeyPersonData.run();\n    if (keyPersonData && keyPersonData.length > 0) {\n      try {\n        keyPersonData.forEach(async (data) => {\n          await InsertOTRelatedInd.run({ kpData: data });\n        });\n      } catch (e) {\n          return false;\n      }\n    }\n    return true;\n  },\n\t\n\t// User Details\n  insertUserDetailsToCNX: async () => {\n    const userDetailData = await GetEntityAdministratorData.run();\n    if (userDetailData && userDetailData.length > 0) {\n      try {\n        userDetailData.forEach(async (user) => {\n          await InsertOTUserDetails.run({\n            arnNo: user.CUSTOMER_OID,\n            userId: user.CUSTOMER_KEY_PERSON_EMAIL.split(\"@\")[0],\n            userName: `${user.CUSTOMER_KEY_PERSON_FIRSTNAME} ${\n              user.CUSTOMER_KEY_PERSON_MIDDLENAME\n                ? `${user.CUSTOMER_KEY_PERSON_MIDDLENAME} `\n                : \"\"\n            }${user.CUSTOMER_KEY_PERSON_LASTNAME}`,\n            email: user.CUSTOMER_KEY_PERSON_EMAIL,\n            mobile: user.CUSTOMER_KEY_PERSON_MOBILE,\n            createdBy: user.CREATE_USER_OID,\n            createdDate: user.CREATE_DATE_TIME,\n            modifiedBy: user.LAST_UPDATE_USER_OID,\n            modifiedDate: user.LAST_UPDATE_DATE_TIME,\n          });\n        });\n      } catch (e) {\n          return false;\n      }\n    }\n    return true;\n  },\n\t\n\t// Address Details\n  insertAddressDetails: async () => {\n    const entityAddr = await SelectEntityAddressDetails.run();\n\n\t\tif (entityAddr.length == 1) {\n\t\t\ttry {\n\t\t\t\tawait InsertEntityCommAddressDetails.run({ data: entityAddr[0] });\n\t\t\t\tawait InsertEntityRegAddressDetails.run({ data: entityAddr[0] });\n\t\t\t\treturn true;\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tconst entityRegAddr = await SelectEntityRegAddressDetails.run();\n\t\t\tconst entityCommAddr = await SelectEntityCommAddressDetails.run();\n\n\t\t\tif (entityRegAddr.length === 1) {\n\t\t\t\ttry {\n\t\t\t\t\tawait InsertEntityRegAddressDetails.run({ data: entityRegAddr[0] });\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (entityCommAddr.length === 1) {\n\t\t\t\ttry {\n\t\t\t\t\tawait InsertEntityCommAddressDetails.run({ data: entityCommAddr[0] });\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n  },\n\t\n\t// key person address\n\tinsertKeyPersonAddressDetails: async () => {\n\t\tconst keyPAddr = await SelectKeyPersonAddressDetails.run();\n\t\ttry {\n        for ( let i = 0 ; i < keyPAddr.length ; i++) {\n            await InsertKeyPersonAddressDetails.run({data : keyPAddr[i] });\n        }\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t};\n    return true;\t\n\t},\n\t\n\t// Bank Details\n  insertBankDetails: async () => {\n    const bankDetails = await SelectBankDetails.run();\n\t\t\n    if(bankDetails && bankDetails.length){\n        try {\n            for (let i = 0; i < bankDetails.length; i++) {\n                await InsertBankDetails.run({ data: bankDetails[i] });\n            }\n        } catch(e) {\n            return false;\n        }\n    }\n\t\treturn true;\n  },\n\n\t// Entity KYC\n  insertEntityKYCDetails: async () => {\n    const entityKycData = await this.getEntityKYCDocData();\n\t\t\n    if(entityKycData && entityKycData.length) {\n        try {\n            entityKycData.forEach(async (data) => {\n                await InsertEntityKYCDetails.run({\n                    docType: data.docTypeCode,\n                    fileName: data.FileName,\n                    link: data.url,\n                });\n            });\n        } catch (e) {\n            return false;\n        }\t\t\t\n    }\n\t\treturn true;\n  },\n\t\n\t// Key Person KYC\n  insertIndKYCDocDetails: async () => {\n    const keyPersonData = await SelectKeyPersonData.run();\n\n    for (let i = 0; i < keyPersonData.length; i++) {\n      const kycData = await this.getIndKYCDocData(\n        keyPersonData[i].OID,\n        keyPersonData[i].CUSTOMER_KEY_PERSON_ENTITY_TYPE\n      );\n\t\t\t\n      if (kycData && kycData.length) {\n          try{\n            kycData.forEach(async (data) => {\n                await InsertIndKYCDetails.run({\n                  customerOID: appsmith.store.customerOID,\n                  keyPersonID: data.keyPId,\n                  keyPersonType: data.keyPType,\n                  docType: data.docTypeCode,\n                  fileName: data.FileName,\n                  link: data.url,\n                });\n              });\n          } catch (e) {\n              return false;\n          }\n      }\n\t\t\treturn true;\n    };\n  },\n\t\n\trunCNXQueries: async () => {\n\t\tconst entityData = await this.insertEntityDataToCNX();\n\t\tconst kpData = await this.insertKeyPersonDataToCNX();\n\t\tconst userDetailsData = await this.insertUserDetailsToCNX();\n\t\tconst entityAddress = await this.insertAddressDetails();\n\t\tconst kpAddress = await this.insertKeyPersonAddressDetails();\n\t\tconst bankDetails = await this.insertBankDetails();\n\t\tconst entityKYC = await this.insertEntityKYCDetails();\n\t\tconst indKYC = await this.insertIndKYCDocDetails();\n\t\t\n\t\tconsole.log(entityData, '--entityData')\n\t\tconsole.log(kpData, '--kpData')\n\t\tconsole.log(userDetailsData, '--userDetailsData')\n\t\tconsole.log(entityAddress, '--entityAddress')\n\t\tconsole.log(kpAddress, '--kpAddress')\n\t\tconsole.log(bankDetails, '--bankDetails')\n\t\tconsole.log(entityKYC, '--entityKYC')\n\t\tconsole.log(indKYC, '--indKYC')\n\t\t\n\t\tif(entityData && kpData && userDetailsData && bankDetails && entityAddress && kpAddress && indKYC && entityKYC){\n\t\t\treturn true;\n\t\t}\n\t}\n}",
    "variables": [
      {
        "name": "myVar1",
        "value": []
      },
      {
        "name": "myVar2",
        "value": {}
      },
      {
        "name": "docShortForms",
        "value": {
          "POI": "Proof of Identification",
          "POA": "Proof of Address",
          "PAN": "PAN",
          "CC": "Cancelled Cheque",
          "IEC": "Import Export Certificate",
          "PD": "PartnerShip Deed",
          "PL": "Partnership Letter",
          "COI": "Certificate of Incorporation",
          "MAA": "Memorandum & Article of Association",
          "LDIR": "List of Directors with DIN",
          "BR": "Board Resolution",
          "BOD": "Beneficial ownership declaration",
          "PD1": "Entity Proof Document 1",
          "PD2": "Entity Proof Document 2",
          "PHT": "Photo",
          "LPDPIN": "List of Partners with DPIN",
          "LLPBR": "LLP Board Resolution"
        }
      }
    ]
  },
  "id": "Page for Query_CNXQueryJSObject",
  "deleted": false,
  "gitSyncId": "62861ecef4ee222f785ff32b_628f459972b49775ce4e8cfc"
}