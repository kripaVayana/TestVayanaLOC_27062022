{
  "unpublishedCollection": {
    "name": "JSObjectUploadKYC",
    "pageId": "Entity KYC Foreign",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tmyVar1: [],\n\tdocShortForms: {\n\t\t'POI': 'Proof of Identification',\n\t\t'POA':'Proof of Address',\n\t\t'TRC': 'Tax registration Certificate',\n\t\t'CC': 'Cancelled Cheque'\n\t\t\n\t},\n\tgetOldFilePath: (docType) => {\n\t\t\tconst list = ListKYCDocQuery.data.filter((entry) => {\n\t\t\tconst dirs = entry.fileName.split(\"/\");\n\t\t\treturn dirs[2].startsWith(docType);\n\t\t\t});\n\t\t\treturn list.length > 0 ? list[0].fileName : null;\n\t},\n\tonPOIUpload: async () => {\n\t\tshowAlert('In change event function');\n\t\t\n\t\tconst oldFilePath = this.getOldFilePath('POI');\n\t\t\n\t\tif(oldFilePath !== null) {\n\t\t\tawait DeleteFileQuery.run(undefined, undefined, {\n\t\t\t\tpath: oldFilePath\n\t\t\t});\n\t\t}\n\t\tawait\tQueryInsertEntityKYCFGN.run({ docType: vayProofofidentity.text, docPathFilename : selectFilesProofOfIdentity.files[0].name});\n\t\tconst interval = setInterval(() => {\n\t\t\tListKYCDocQuery.run();\n\t\t\tclearInterval(interval);\n\t\t}, 2000);\n\t\t\n\t\tawait QueryPOI.run();\n\t},\n\tdeleteIfFileExist: async (docType) => {\n\t\t\tconst oldFilePath = this.getOldFilePath(docType);\n\t\t\tif(oldFilePath !== null) {\n\t\t\t\tawait DeleteFileQuery.run(undefined, undefined, {\n\t\t\t\t\t\tpath: oldFilePath\n\t\t\t\t});\n\t\t\t}\n\t},\n\tmyFunUploadKYC: async () => {\n\t\t\t\n\t\t\t\n\t\t\tif(selectFilesProofOfIdentity.files.length === 1) {\n\t\t\t\t\tawait this.deleteIfFileExist('POI');\t\t\t\t\n\t\t\t\t\tawait\tQueryInsertEntityKYCFGN.run({ \n\t\t\t\t\t\tdocType: vayProofofidentity.text, \n\t\t\t\t\t\tdocPathFilename: selectFilesProofOfIdentity.files[0].name\n\t\t\t\t\t});\n\t\t\t\t\tQueryPOI.run();\n\t\t\t}\n\t\t\n\t\t\tif(selectFilesProofOfAddress.files.length === 1) {\n\t\t\t\tawait this.deleteIfFileExist('POA');\t\t\n\t\t\t\tawait\tQueryInsertEntityKYCFGN.run({\n\t\t\t\t\tdocType:vayProofofaddress.text,\n\t\t\t\t\tdocPathFilename: selectFilesProofOfAddress.files[0].name\n\t\t\t\t});\n\t\t\t\tawait QueryProofAddress.run();\n\t\t\t}\n\t\t\n\t\tif(selectFilesTaxRegCert.files.length === 1) {\n\t\t\tawait this.deleteIfFileExist('TRC');\n\t\t\tawait QueryInsertEntityKYCFGN.run({\n\t\t\t\tdocType:'Tax Registration Certificate',\n\t\t\t\tdocPathFilename :selectFilesTaxRegCert.files[0].name\n\t\t\t});\n\t\t\tawait QueryTaxRegCert.run();\n\t\t}\n\n\t\tif(selectFilesCancelledCheque.files.length === 1) {\n\t\t\tawait this.deleteIfFileExist('CC');\n\t\t\tawait QueryInsertEntityKYCFGN.run({ \n\t\t\t\tdocType:'Cancelled Cheque',\n\t\t\t\tdocPathFilename :selectFilesCancelledCheque.files[0].name\n\t\t\t});\n\t\t\tawait QueryCancelledCheque.run();\n\t\t}\n\n\t\tshowAlert('KYC Documents Uploaded');\n\t\tnavigateTo('Individual KYC Summary', {});\n\t},\n\tgetTableData: () => {\n\t\treturn ListKYCDocQuery.data.map((entry) => {\n\t\t\tconst dirs = entry.fileName.split(\"/\");\n\t\t\tconst fileDetails = dirs[2].split(\"__\");\n\t\t\treturn {\n\t\t\t\tDocumentType: this.docShortForms[fileDetails[0]],\n\t\t\t\tDocumentName: fileDetails.length === 3 ? fileDetails[1] : '-',\n\t\t\t\tFileName: fileDetails[fileDetails.length - 1],\n\t\t\t\tDownload: '',\n\t\t\t\tRemove: '',\n\t\t\t\tpath: entry.fileName\n\t\t\t};\n\t\t});\n\t},\n\tdownloadFile: async (fileName, path) => {\n\t\tshowAlert(`File name for download: ${fileName} ${path}`);\n\t\tconst name = fileName;\n\t\tawait storeValue('tempfileName', fileName);\n\t\tawait downloadFileQuery.run(()=> {\n\t\t\t\tdownload(atob(downloadFileQuery.data.fileData), appsmith.store.tempfileName);\n\t\t\t}, undefined, {\n\t\t\tpath: path\n\t\t});\n\t},\n\tremoveFile: async (path) => {\n\t\tawait DeleteFileQuery.run(() => {\n\t\t\tListKYCDocQuery.run();\n\t\t}, undefined, {\n\t\t\tpath: path\n\t\t});\n\t\t\n\t}\n}",
    "variables": [
      {
        "name": "myVar1",
        "value": []
      },
      {
        "name": "docShortForms",
        "value": {
          "POI": "Proof of Identification",
          "POA": "Proof of Address",
          "TRC": "Tax registration Certificate",
          "CC": "Cancelled Cheque"
        }
      }
    ]
  },
  "id": "Entity KYC Foreign_JSObjectUploadKYC",
  "deleted": false,
  "gitSyncId": "6275fd066da31d666e5b90e5_627765a66da31d666e5b9718"
}